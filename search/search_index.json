{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO CDC The siddhi-io-cdc extension is an extension to Siddhi that captures change data from databases such as MySQL, MS SQL, PostgreSQL, H2 and Oracle. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.17 . Features cdc ( Source ) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Dependencies JDBC connector jar should be added to the runtime. Download the JDBC connector jar based on the database type that is being used. To identify the required JDBC connector jar, please refer to this debezium release documentation In addition to that, there are some prerequisites that need to be met based on the CDC mode used. Please find them below. Default mode (Listening mode): Currently MySQL, PostgreSQL and SQLServer are supported in Listening Mode. To capture the change events, databases have to be configured as shown below. MySQL - https://debezium.io/documentation/reference/connectors/mysql.html#setup-the-mysql-server PostgreSQL - https://debezium.io/docs/connectors/postgresql/#setting-up-PostgreSQL SQLServer - https://debezium.io/docs/connectors/sqlserver/#setting-up-sqlserver Polling mode: Change data capturing table should be have a polling column. Auto Incremental column or Timestamp can be used. Please see API docs for more details about change data capturing modes. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Running Integration tests in docker containers(Optional) The CDC functionality are tested with the docker base integration test framework. The test framework initialize a docker container with required configuration before execute the test suit. Start integration tests Install and run docker To run the integration tests, navigate to the siddhi-io-cdc/ directory and issue the following commands. H2 default: mvn clean install MySQL 5.7: mvn verify -P local-mysql -Dskip.surefire.test=true Postgres 9.6: mvn verify -P local-postgres -Dskip.surefire.test=true MSSQL: mvn verify -P local-mssql -Dskip.surefire.test=true Oracle 11.2.0.2-xe: mvn verify -P local-oracle -Dskip.surefire.test=true Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-cdc","text":"The siddhi-io-cdc extension is an extension to Siddhi that captures change data from databases such as MySQL, MS SQL, PostgreSQL, H2 and Oracle. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO CDC"},{"location":"#download","text":"Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.17 .","title":"Latest API Docs"},{"location":"#features","text":"cdc ( Source ) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events.","title":"Features"},{"location":"#dependencies","text":"JDBC connector jar should be added to the runtime. Download the JDBC connector jar based on the database type that is being used. To identify the required JDBC connector jar, please refer to this debezium release documentation In addition to that, there are some prerequisites that need to be met based on the CDC mode used. Please find them below. Default mode (Listening mode): Currently MySQL, PostgreSQL and SQLServer are supported in Listening Mode. To capture the change events, databases have to be configured as shown below. MySQL - https://debezium.io/documentation/reference/connectors/mysql.html#setup-the-mysql-server PostgreSQL - https://debezium.io/docs/connectors/postgresql/#setting-up-PostgreSQL SQLServer - https://debezium.io/docs/connectors/sqlserver/#setting-up-sqlserver Polling mode: Change data capturing table should be have a polling column. Auto Incremental column or Timestamp can be used. Please see API docs for more details about change data capturing modes.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#running-integration-tests-in-docker-containersoptional","text":"The CDC functionality are tested with the docker base integration test framework. The test framework initialize a docker container with required configuration before execute the test suit. Start integration tests Install and run docker To run the integration tests, navigate to the siddhi-io-cdc/ directory and issue the following commands. H2 default: mvn clean install MySQL 5.7: mvn verify -P local-mysql -Dskip.surefire.test=true Postgres 9.6: mvn verify -P local-postgres -Dskip.surefire.test=true MSSQL: mvn verify -P local-mssql -Dskip.surefire.test=true Oracle 11.2.0.2-xe: mvn verify -P local-oracle -Dskip.surefire.test=true","title":"Running Integration tests in docker containers(Optional)"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#source","text":"","title":"Source"},{"location":"api/1.0.10/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process.","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#source","text":"","title":"Source"},{"location":"api/1.0.11/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process.","title":"cdc (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Source cdc (Source) The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url Connection url to the database. use format: jdbc:mysql:// host : port / database_name STRING No No mode Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. Required for 'polling' mode. STRING Yes No username Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. STRING No No password Password for the above user. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. STRING Yes No table.name Name of the table which needs to be monitored for data changes. STRING No No polling.column Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. STRING Yes No polling.interval The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. 1 INT Yes No operation Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. STRING No No connector.properties Debezium connector specified properties as a comma separated string. This properties will have more priority over the parameters. Only for 'listening' mode Empty_String STRING Yes No database.server.id For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. Random integer between 5400 and 6400 STRING Yes No database.server.name Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the cdc source starts listening to the row insertions on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#cdc-source","text":"The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url Connection url to the database. use format: jdbc:mysql:// host : port / database_name STRING No No mode Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. Required for 'polling' mode. STRING Yes No username Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. STRING No No password Password for the above user. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. STRING Yes No table.name Name of the table which needs to be monitored for data changes. STRING No No polling.column Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. STRING Yes No polling.interval The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. 1 INT Yes No operation Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. STRING No No connector.properties Debezium connector specified properties as a comma separated string. This properties will have more priority over the parameters. Only for 'listening' mode Empty_String STRING Yes No database.server.id For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. Random integer between 5400 and 6400 STRING Yes No database.server.name Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the cdc source starts listening to the row insertions on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.","title":"cdc (Source)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 Source cdc (Source) The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url Connection url to the database. use format: jdbc:mysql:// host : port / database_name STRING No No mode Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. Required for 'polling' mode. STRING Yes No username Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. STRING No No password Password for the above user. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. STRING Yes No table.name Name of the table which needs to be monitored for data changes. STRING No No polling.column Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. STRING Yes No polling.interval The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. 1 INT Yes No operation Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. STRING No No connector.properties Debezium connector specified properties as a comma separated string. This properties will have more priority over the parameters. Only for 'listening' mode Empty_String STRING Yes No database.server.id For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. Random integer between 5400 and 6400 STRING Yes No database.server.name Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the cdc source starts listening to the row insertions on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#source","text":"","title":"Source"},{"location":"api/1.0.6/#cdc-source","text":"The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url Connection url to the database. use format: jdbc:mysql:// host : port / database_name STRING No No mode Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. Required for 'polling' mode. STRING Yes No username Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. STRING No No password Password for the above user. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. STRING Yes No table.name Name of the table which needs to be monitored for data changes. STRING No No polling.column Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. STRING Yes No polling.interval The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. 1 INT Yes No operation Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. STRING No No connector.properties Debezium connector specified properties as a comma separated string. This properties will have more priority over the parameters. Only for 'listening' mode Empty_String STRING Yes No database.server.id For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. Random integer between 5400 and 6400 STRING Yes No database.server.name Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the cdc source starts listening to the row insertions on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.","title":"cdc (Source)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Source cdc (Source) The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url Connection url to the database. use format: jdbc:mysql:// host : port / database_name STRING No No mode Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. Required for 'polling' mode. STRING Yes No username Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. STRING No No password Password for the above user. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. STRING Yes No table.name Name of the table which needs to be monitored for data changes. STRING No No polling.column Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. STRING Yes No polling.interval The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. 1 INT Yes No operation Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. STRING No No connector.properties Debezium connector specified properties as a comma separated string. This properties will have more priority over the parameters. Only for 'listening' mode Empty_String STRING Yes No database.server.id For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. Random integer between 5400 and 6400 STRING Yes No database.server.name Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the cdc source starts listening to the row insertions on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#source","text":"","title":"Source"},{"location":"api/1.0.7/#cdc-source","text":"The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url Connection url to the database. use format: jdbc:mysql:// host : port / database_name STRING No No mode Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. Required for 'polling' mode. STRING Yes No username Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. STRING No No password Password for the above user. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. STRING Yes No table.name Name of the table which needs to be monitored for data changes. STRING No No polling.column Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. STRING Yes No polling.interval The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. 1 INT Yes No operation Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. STRING No No connector.properties Debezium connector specified properties as a comma separated string. This properties will have more priority over the parameters. Only for 'listening' mode Empty_String STRING Yes No database.server.id For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. Random integer between 5400 and 6400 STRING Yes No database.server.name Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the cdc source starts listening to the row insertions on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.","title":"cdc (Source)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#source","text":"","title":"Source"},{"location":"api/1.0.8/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#source","text":"","title":"Source"},{"location":"api/1.0.9/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#source","text":"","title":"Source"},{"location":"api/2.0.1/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/2.0.10/","text":"API Docs - v2.0.10 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.10"},{"location":"api/2.0.10/#api-docs-v2010","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.10"},{"location":"api/2.0.10/#source","text":"","title":"Source"},{"location":"api/2.0.10/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.11/","text":"API Docs - v2.0.11 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.11"},{"location":"api/2.0.11/#api-docs-v2011","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.11"},{"location":"api/2.0.11/#source","text":"","title":"Source"},{"location":"api/2.0.11/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.12/","text":"API Docs - v2.0.12 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.12"},{"location":"api/2.0.12/#api-docs-v2012","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.12"},{"location":"api/2.0.12/#source","text":"","title":"Source"},{"location":"api/2.0.12/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.13/","text":"API Docs - v2.0.13 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.13"},{"location":"api/2.0.13/#api-docs-v2013","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.13"},{"location":"api/2.0.13/#source","text":"","title":"Source"},{"location":"api/2.0.13/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver #### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above #### Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.14/","text":"API Docs - v2.0.14 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, yaml siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.14"},{"location":"api/2.0.14/#api-docs-v2014","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.14"},{"location":"api/2.0.14/#source","text":"","title":"Source"},{"location":"api/2.0.14/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, yaml siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.15/","text":"API Docs - v2.0.15 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.15"},{"location":"api/2.0.15/#api-docs-v2015","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.15"},{"location":"api/2.0.15/#source","text":"","title":"Source"},{"location":"api/2.0.15/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.17/","text":"API Docs - v2.0.17 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.17"},{"location":"api/2.0.17/#api-docs-v2017","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.17"},{"location":"api/2.0.17/#source","text":"","title":"Source"},{"location":"api/2.0.17/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.2/","text":"API Docs - v2.0.2 Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"2.0.2"},{"location":"api/2.0.2/#api-docs-v202","text":"Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.2"},{"location":"api/2.0.2/#source","text":"","title":"Source"},{"location":"api/2.0.2/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. The key values of the map of a CDC change event are as follows. For insert: Keys are specified as columns of the table. For delete: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the coloumns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/2.0.3/","text":"API Docs - v2.0.3 Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"2.0.3"},{"location":"api/2.0.3/#api-docs-v203","text":"Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.3"},{"location":"api/2.0.3/#source","text":"","title":"Source"},{"location":"api/2.0.3/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table. See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. It is required to specify a value when the mode is 'listening'. This parameter is not case sensitive. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field.","title":"cdc (Source)"},{"location":"api/2.0.4/","text":"API Docs - v2.0.4 Tested Siddhi Core version: 5.1.7 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.4"},{"location":"api/2.0.4/#api-docs-v204","text":"Tested Siddhi Core version: 5.1.7 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.4"},{"location":"api/2.0.4/#source","text":"","title":"Source"},{"location":"api/2.0.4/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.5/","text":"API Docs - v2.0.5 Tested Siddhi Core version: 5.1.7 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.5"},{"location":"api/2.0.5/#api-docs-v205","text":"Tested Siddhi Core version: 5.1.7 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.5"},{"location":"api/2.0.5/#source","text":"","title":"Source"},{"location":"api/2.0.5/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.6/","text":"API Docs - v2.0.6 Tested Siddhi Core version: 5.1.7 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.6"},{"location":"api/2.0.6/#api-docs-v206","text":"Tested Siddhi Core version: 5.1.7 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.6"},{"location":"api/2.0.6/#source","text":"","title":"Source"},{"location":"api/2.0.6/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing recrod is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.7/","text":"API Docs - v2.0.7 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.7"},{"location":"api/2.0.7/#api-docs-v207","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.7"},{"location":"api/2.0.7/#source","text":"","title":"Source"},{"location":"api/2.0.7/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.8/","text":"API Docs - v2.0.8 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.8"},{"location":"api/2.0.8/#api-docs-v208","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.8"},{"location":"api/2.0.8/#source","text":"","title":"Source"},{"location":"api/2.0.8/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/2.0.9/","text":"API Docs - v2.0.9 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"2.0.9"},{"location":"api/2.0.9/#api-docs-v209","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.9"},{"location":"api/2.0.9/#source","text":"","title":"Source"},{"location":"api/2.0.9/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.#### Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to 'polling', and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update' or 'delete'. This parameter is not case sensitive. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 7 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 8 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"},{"location":"api/latest/","text":"API Docs - v2.0.17 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Source cdc (Source) The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"latest"},{"location":"api/latest/#api-docs-v2017","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.17"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#cdc-source","text":"The CDC source receives events when change events (i.e., INSERT, UPDATE, DELETE) are triggered for a database table. Events are received in the 'key-value' format. There are two modes you could perform CDC: Listening mode and Polling mode. In polling mode, the datasource is periodically polled for capturing the changes. The polling period can be configured. In polling mode, you can only capture INSERT and UPDATE changes. On listening mode, the Source will keep listening to the Change Log of the database and notify in case a change has taken place. Here, you are immediately notified about the change, compared to polling mode. The key values of the map of a CDC change event are as follows. For 'listening' mode: For insert: Keys are specified as columns of the table. For delete: Keys are followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For update: Keys are followed followed by the specified table columns. This is achieved via 'before_'. e.g., specifying 'before_X' results in the key being added before the column named 'X'. For 'polling' mode: Keys are specified as the columns of the table.In order to connect in to the database table for receive CDC events, url, username, password and driverClassName(in polling mode) can be provided in deployment.yaml file under the siddhi namespace as below, siddhi: extensions: - extension: name: 'cdc' namespace: 'source' properties: url: jdbc:sqlserver://localhost:1433;databaseName=CDC_DATA_STORE password: password username: driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver Preparations required for working with Oracle Databases in listening mode Using the extension in Windows, Mac OSX and AIX are pretty straight forward inorder to achieve the required behaviour please follow the steps given below - Download the compatible version of oracle instantclient for the database version from here and extract - Extract and set the environment variable LD_LIBRARY_PATH to the location of instantclient which was exstracted as shown below export LD_LIBRARY_PATH= path to the instant client location - Inside the instantclient folder which was download there are two jars xstreams.jar and ojdbc version .jar convert them to OSGi bundles using the tools which were provided in the distribution /bin for converting the ojdbc.jar use the tool spi-provider.sh|bat and for the conversion of xstreams.jar use the jni-provider.sh as shown below(Note: this way of converting Xstreams jar is applicable only for Linux environments for other OSs this step is not required and converting it through the jartobundle.sh tool is enough) ./jni-provider.sh input-jar destination comma seperated native library names once ojdbc and xstreams jars are converted to OSGi copy the generated jars to the distribution /lib . Currently siddhi-io-cdc only supports the oracle database distributions 12 and above Configurations for PostgreSQL When using listening mode with PostgreSQL, following properties has to be configured accordingly to create the connection. slot.name : (default value = debezium) in postgreSQL only one connection can be created from single slot, so to create multiple connection custom slot.name should be provided. plugin.name : (default value = decoderbufs ) Logical decoding output plugin name which the database is configured with. Other supported values are pgoutput, decoderbufs, wal2json. table.name : table name should be provided as schema_name . table_name . As an example, public.customer See parameter: mode for supported databases and change events. Syntax @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , wait.on.missed.record= BOOL , missed.record.waiting.timeout= INT , polling.history.size= INT , cron.expression= STRING , plugin.name= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic url The connection URL to the database. F=The format used is: 'jdbc:mysql:// host : port / database_name ' STRING No No mode Mode to capture the change data. The type of events that can be received, and the required parameters differ based on the mode. The mode can be one of the following: 'polling': This mode uses a column named 'polling.column' to monitor the given table. It captures change events of the 'RDBMS', 'INSERT, and 'UPDATE' types. 'listening': This mode uses logs to monitor the given table. It currently supports change events only of the 'MySQL', 'INSERT', 'UPDATE', and 'DELETE' types. listening STRING Yes No jdbc.driver.name The driver class name for connecting the database. It is required to specify a value for this parameter when the mode is 'polling'. STRING Yes No username The username to be used for accessing the database. This user needs to have the 'SELECT', 'RELOAD', 'SHOW DATABASES', 'REPLICATION SLAVE', and 'REPLICATION CLIENT'privileges for the change data capturing table (specified via the 'table.name' parameter). To operate in the polling mode, the user needs 'SELECT' privileges. STRING No No password The password of the username you specified for accessing the database. STRING No No pool.properties The pool parameters for the database connection can be specified as key-value pairs. STRING Yes No datasource.name Name of the wso2 datasource to connect to the database. When datasource name is provided, the URL, username and password are not needed. A datasource based connection is given more priority over the URL based connection. This parameter is applicable only when the mode is set to polling , and it can be applied only when you use this extension with WSO2 Stream Processor. STRING Yes No table.name The name of the table that needs to be monitored for data changes. STRING No No polling.column The column name that is polled to capture the change data. It is recommended to have a TIMESTAMP field as the 'polling.column' in order to capture the inserts and updates. Numeric auto-incremental fields and char fields can also be used as 'polling.column'. However, note that fields of these types only support insert change capturing, and the possibility of using a char field also depends on how the data is input. It is required to enter a value for this parameter only when the mode is 'polling'. STRING Yes No polling.interval The time interval (specified in seconds) to poll the given table for changes. This parameter is applicable only when the mode is set to 'polling'. 1 INT Yes No operation The change event operation you want to carry out. Possible values are 'insert', 'update', 'delete' or you can provide multiple operation as coma separated values. This parameter is not case sensitive. When provided the multiple operations, the relevant operation for each event will be return as a transport property trp:operation this can be access when mapping the events. According to the operation, the required fields from the stream has to be extracted. It is required to specify a value only when the mode is 'listening'. STRING No No connector.properties Here, you can specify Debezium connector properties as a comma-separated string. The properties specified here are given more priority over the parameters. This parameter is applicable only for the 'listening' mode. Empty_String STRING Yes No database.server.id An ID to be used when joining MySQL database cluster to read the bin log. This should be a unique integer between 1 to 2^32. This parameter is applicable only when the mode is 'listening'. Random integer between 5400 and 6400 STRING Yes No database.server.name A logical name that identifies and provides a namespace for the database server. This parameter is applicable only when the mode is 'listening'. {host}_{port} STRING Yes No wait.on.missed.record Indicates whether the process needs to wait on missing/out-of-order records. When this flag is set to 'true' the process will be held once it identifies a missing record. The missing record is identified by the sequence of the polling.column value. This can be used only with number fields and not recommended to use with time values as it will not be sequential. This should be enabled ONLY where the records can be written out-of-order, (eg. concurrent writers) as this degrades the performance. false BOOL Yes No missed.record.waiting.timeout The timeout (specified in seconds) to retry for missing/out-of-order record. This should be used along with the wait.on.missed.record parameter. If the parameter is not set, the process will indefinitely wait for the missing record. -1 INT Yes No polling.history.size Should be use when metrics are enabled, Define the number of polling details that should expose to metrics, Ex: if polling.history.size is 20, then it will expose details of last 20 polling 10 INT Yes No cron.expression This is used to specify a timestamp in cron expression.The records which has been inserted or updated is printed when the given expression satisfied by the system time. This parameter is applicable only when the mode is 'polling'. None STRING Yes No plugin.name This is used when the logical decoding output plugin needed to specify to create the connection to the database. Mostly this will be required on PostgreSQL. decoderbufs STRING Yes No Examples EXAMPLE 1 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert', @map(type='keyvalue', @attributes(id = 'id', name = 'name'))) define stream inputStream (id string, name string); In this example, the CDC source listens to the row insertions that are made in the 'students' table with the column name, and the ID. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 2 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'update', @map(type='keyvalue', @attributes(id = 'id', name = 'name', before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, id string, before_name string , name string); In this example, the CDC source listens to the row updates that are made in the 'students' table. This table belongs to the 'SimpleDB' MySQL database that can be accessed via the given URL. EXAMPLE 3 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name'))) define stream inputStream (before_id string, before_name string); In this example, the CDC source listens to the row deletions made in the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 4 @source(type = 'cdc' , url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', operation = 'insert,update,delete', @map(type='keyvalue', @attributes(before_id = 'before_id', before_name = 'before_name', name = 'name', id = 'id', operation= 'trp:operation'))) define stream inputStream (id string, name string, before_id string, before_name string, operation string); In this example, the CDC source listens to multiple operations of the 'students' table. This table belongs to the 'SimpleDB' database that can be accessed via the given URL. EXAMPLE 5 @source(type = 'cdc', mode='polling', polling.column = 'id', jdbc.driver.name = 'com.mysql.jdbc.Driver', url = 'jdbc:mysql://localhost:3306/SimpleDB', username = 'cdcuser', password = 'pswd4cdc', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. 'id' that is specified as the polling colum' is an auto incremental field. The connection to the database is made via the URL, username, password, and the JDBC driver name. EXAMPLE 6 @source(type = 'cdc', mode='polling', polling.column = 'id', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue'), @attributes(id = 'id', name = 'name')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The given polling column is a char column with the 'S001, S002, ... .' pattern. The connection to the database is made via a data source named 'SimpleDB'. Note that the 'datasource.name' parameter works only with the Stream Processor. EXAMPLE 7 @source(type = 'cdc', mode='polling', polling.column = 'last_updated', datasource.name = 'SimpleDB', table.name = 'students', @map(type='keyvalue')) define stream inputStream (name string); In this example, the CDC source polls the 'students' table for inserts and updates. The polling column is a timestamp field. EXAMPLE 8 @source(type='cdc', jdbc.driver.name='com.mysql.jdbc.Driver', url='jdbc:mysql://localhost:3306/SimpleDB', username='cdcuser', password='pswd4cdc', table.name='students', mode='polling', polling.column='id', operation='insert', wait.on.missed.record='true', missed.record.waiting.timeout='10', @map(type='keyvalue'), @attributes(batch_no='batch_no', item='item', qty='qty')) define stream inputStream (id int, name string); In this example, the CDC source polls the 'students' table for inserts. The polling column is a numeric field. This source expects the records in the database to be written concurrently/out-of-order so it waits if it encounters a missing record. If the record doesn't appear within 10 seconds it resumes the process. EXAMPLE 9 @source(type = 'cdc', url = 'jdbc:oracle:thin://localhost:1521/ORCLCDB', username='c##xstrm', password='xs', table.name='DEBEZIUM.sweetproductiontable', operation = 'insert', connector.properties='oracle.outserver.name=DBZXOUT,oracle.pdb=ORCLPDB1' @map(type = 'keyvalue')) define stream insertSweetProductionStream (ID int, NAME string, WEIGHT int); In this example, the CDC source connect to an Oracle database and listens for insert queries of sweetproduction table","title":"cdc (Source)"}]}